// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhoneStore.Persistence.Database;

#nullable disable

namespace PhoneStore.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhoneStore.Domain.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.CustomerLoans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("UnpaidAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerLoans");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.CustomersPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("PaymentAmount")
                        .HasColumnType("integer");

                    b.Property<int>("SalesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesId");

                    b.ToTable("CustomersPayments");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.ExtraExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("ExtraExpenses");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Goods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GoodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "کابل",
                            NameEnglish = "Kabul"
                        },
                        new
                        {
                            Id = 2,
                            Name = "کاپيسا",
                            NameEnglish = "Kapisa"
                        },
                        new
                        {
                            Id = 3,
                            Name = "پروان",
                            NameEnglish = "Parwan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "میدان وردک",
                            NameEnglish = "Wardak"
                        },
                        new
                        {
                            Id = 5,
                            Name = "لوگر",
                            NameEnglish = "Logar"
                        },
                        new
                        {
                            Id = 6,
                            Name = "غزني",
                            NameEnglish = "Ghazni"
                        },
                        new
                        {
                            Id = 7,
                            Name = "پکتيا",
                            NameEnglish = "Paktia"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ننگرهار",
                            NameEnglish = "Nangarhar"
                        },
                        new
                        {
                            Id = 9,
                            Name = "لغمان",
                            NameEnglish = "Laghman"
                        },
                        new
                        {
                            Id = 10,
                            Name = "کنر",
                            NameEnglish = "Kunar"
                        },
                        new
                        {
                            Id = 11,
                            Name = "بدخشان",
                            NameEnglish = "Badakhshan"
                        },
                        new
                        {
                            Id = 12,
                            Name = "تخار",
                            NameEnglish = "Takhar"
                        },
                        new
                        {
                            Id = 13,
                            Name = "بغلان",
                            NameEnglish = "Baghlan"
                        },
                        new
                        {
                            Id = 14,
                            Name = "کندوز",
                            NameEnglish = "Kunduz"
                        },
                        new
                        {
                            Id = 15,
                            Name = "سمنگان",
                            NameEnglish = "Samangan"
                        },
                        new
                        {
                            Id = 16,
                            Name = "بلخ",
                            NameEnglish = "Balkh"
                        },
                        new
                        {
                            Id = 17,
                            Name = "جوزجان",
                            NameEnglish = "Jawzjan"
                        },
                        new
                        {
                            Id = 18,
                            Name = "فارياب",
                            NameEnglish = "Faryab"
                        },
                        new
                        {
                            Id = 19,
                            Name = "بادغيس",
                            NameEnglish = "Badghis"
                        },
                        new
                        {
                            Id = 20,
                            Name = "هرات",
                            NameEnglish = "Herat"
                        },
                        new
                        {
                            Id = 21,
                            Name = "فراه",
                            NameEnglish = "Farah"
                        },
                        new
                        {
                            Id = 22,
                            Name = "نيمروز",
                            NameEnglish = "Nimroz"
                        },
                        new
                        {
                            Id = 23,
                            Name = "هلمند",
                            NameEnglish = "Hilmand"
                        },
                        new
                        {
                            Id = 24,
                            Name = "کندهار",
                            NameEnglish = "Kandahar"
                        },
                        new
                        {
                            Id = 25,
                            Name = "زابل",
                            NameEnglish = "Zabul"
                        },
                        new
                        {
                            Id = 26,
                            Name = "ارزگان",
                            NameEnglish = "Uruzgan"
                        },
                        new
                        {
                            Id = 27,
                            Name = "غور",
                            NameEnglish = "Ghor"
                        },
                        new
                        {
                            Id = 28,
                            Name = "باميان",
                            NameEnglish = "Bamyan"
                        },
                        new
                        {
                            Id = 29,
                            Name = "پکتيکا",
                            NameEnglish = "Paktika"
                        },
                        new
                        {
                            Id = 30,
                            Name = "نورستان",
                            NameEnglish = "Nuristan"
                        },
                        new
                        {
                            Id = 31,
                            Name = "سرپل",
                            NameEnglish = "Sar i Pul"
                        },
                        new
                        {
                            Id = 32,
                            Name = "خوست",
                            NameEnglish = "Khost"
                        },
                        new
                        {
                            Id = 33,
                            Name = "پنجشير",
                            NameEnglish = "Panjshir"
                        },
                        new
                        {
                            Id = 34,
                            Name = "دايکندي",
                            NameEnglish = "Daikundi"
                        });
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GoodId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("PaidAmount")
                        .HasColumnType("integer");

                    b.Property<int>("PurchaseAmount")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<int>("UnPaidAmount")
                        .HasColumnType("integer");

                    b.Property<int>("UnitPurchasePrice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Sales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("GoodId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("PaidAmount")
                        .HasColumnType("integer");

                    b.Property<int>("SaleAmount")
                        .HasColumnType("integer");

                    b.Property<int>("SaleUnitPrice")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<int>("UnPaidAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GoodId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GoodId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.SupplierLoans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("UnpaidAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierLoans");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.SuppliersPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifyBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SuppliersPayments");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Customer", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.CustomerLoans", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.CustomersPayment", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStore.Domain.Models.Sales", "Sales")
                        .WithMany()
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Goods", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Purchase", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStore.Domain.Models.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Sales", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStore.Domain.Models.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Stock", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Goods", "Good")
                        .WithMany()
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.SupplierLoans", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.SuppliersPayment", b =>
                {
                    b.HasOne("PhoneStore.Domain.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneStore.Domain.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("PhoneStore.Domain.Models.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
